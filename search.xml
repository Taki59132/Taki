<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>LineBot python網路爬蟲+簡易語意分析</title>
      <link href="/Taki/2018/05/30/LineBot-python%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2+%E7%B0%A1%E6%98%93%E8%AA%9E%E6%84%8F%E5%88%86%E6%9E%901/"/>
      <url>/Taki/2018/05/30/LineBot-python%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2+%E7%B0%A1%E6%98%93%E8%AA%9E%E6%84%8F%E5%88%86%E6%9E%901/</url>
      <content type="html"><![CDATA[<h1 id="LineBot-python網路爬蟲-語意分析"><a href="#LineBot-python網路爬蟲-語意分析" class="headerlink" title="LineBot python網路爬蟲+語意分析"></a>LineBot python網路爬蟲+語意分析</h1><ul><li><h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><h3 id="1-下載Visual-Studio-Code"><a href="#1-下載Visual-Studio-Code" class="headerlink" title="1.下載Visual Studio Code"></a>1.下載<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a></h3><ol><li><font size="3">使用方法: </font>檔案-&gt;開啟資料夾-&gt;選擇你要進行作業的資料夾-&gt;按下選擇資料夾即可</li><li><p><font size="3">語言環境：</font>VS Code 附加強大環境建置功能，當選擇一個未使用過的語言時，將於<strong><em>右下角提示</em></strong>，依照提示進行作業，即可完成程式語言環境建置。</p><blockquote><p>VS Code 適合<strong><em>動態語言編輯</em></strong>，例如: <code>python</code> ， 故要拿VS code進行<strong><em>靜態語言</em></strong> <code>Java</code> 之開發，不如使用Eclipse來的實在。</p></blockquote></li><li><p>VS Code<a href="https://scotch.io/tutorials/best-of-visual-studio-code-features-plugins-acting-like-atom-and-sublime#toc-built-in-git" target="_blank" rel="noopener">其他的優化插件</a></p></li><li>按下CTRL + ` 即可於下方開啟終端機，<blockquote><p>此圖為我在撰寫Taki Blog時所開啟之資料夾，與Line Bot 無關<br><img src="https://i.imgur.com/pSBlreY.png"></p><a id="more"></a></blockquote><h3 id="2-範例Code-下載"><a href="#2-範例Code-下載" class="headerlink" title="2. 範例Code 下載"></a>2. 範例Code <a href="https://drive.google.com/file/d/1xIlBCk2F5qDv1l4efsukPARybBy2tc3H/view?usp=sharing" target="_blank" rel="noopener">下載</a></h3><blockquote><p>下載後解壓縮於VS Code中開啟<br><img src="https://i.imgur.com/qy7yITY.png"></p></blockquote></li></ol></li></ul><h3 id="3-python-模組下載"><a href="#3-python-模組下載" class="headerlink" title="3. python 模組下載"></a>3. python 模組下載</h3><ol><li>於VS Code 開啟終端機</li><li>鍵入下面兩個指令<br>$ pip instal <a href="http://flask.pocoo.org/" target="_blank" rel="noopener">flask</a><br>$ pip install <a href="https://github.com/line/line-bot-sdk-python" target="_blank" rel="noopener">line-bot-sdk</a></li><li>沒有出現Error 即完成模組下載</li></ol><h3 id="4-建立Heroku-遠端伺服器-免費"><a href="#4-建立Heroku-遠端伺服器-免費" class="headerlink" title="4. 建立Heroku 遠端伺服器(免費)"></a>4. 建立<a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> 遠端伺服器(免費)</h3><ol><li>請註冊一個帳戶</li><li>下載並安裝<a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener">Heroku CLI</a>、<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li><li>於登入後，點選New -&gt; Creat New App<br><img src="https://i.imgur.com/CBECy4z.png?1"></li><li><p>輸入App name </p><blockquote><p>隨便取一個名子即可，但必須是<strong><em>小寫英文字母</em></strong>      </p></blockquote><p><img src="https://i.imgur.com/gT4z0Im.png?1"></p></li><li>按下Create app 後會倒入此頁，之後這邊先放在旁邊<strong><em>暫時不做使用</em></strong>。<br><img src="https://i.imgur.com/axz9mlR.png"></li></ol><h3 id="5-建立-Line-Bot"><a href="#5-建立-Line-Bot" class="headerlink" title="5. 建立 Line Bot"></a>5. 建立 Line Bot</h3><ol><li>進入<a href="https://developers.line.me/console/" target="_blank" rel="noopener">Line 控制台</a>後選取 Messanging API<br><img src="https://i.imgur.com/mOn8CO6.png"></li><li>進入後，依序填入資料。 <span class="label danger">注意：於Plan 必須選取Developer Trial 才可以進行line bot 的</span><br><img src="https://i.imgur.com/7F1WDFY.png"></li><li>送出後，進入API。<span class="label danger">注意：對於兩個後方的Issue按一下更新號碼</span><br><img src="https://i.imgur.com/MDqU2jj.png?1"></li><li>開啟剛剛的VS Code，進入app.py，並將這兩個號碼，對應值填上<br><img src=" https://i.imgur.com/tMXL7ln.png?1"></li></ol><h3 id="6-部屬到Heroku-上"><a href="#6-部屬到Heroku-上" class="headerlink" title="6. 部屬到Heroku 上"></a>6. 部屬到Heroku 上</h3> <span class="label danger">注意：以下假設你是使用VS Code 中內建的終端機，因此不再進行路徑設定，如使用電腦本身CMD，請先行 cd 到該資料夾</span><ol><li><p>於終端機下登錄Heroku</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku login</span></span><br></pre></td></tr></table></figure></li><li><p>初始化 git</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"你的名字"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email 你的信箱</span><br></pre></td></tr></table></figure></li><li><p>將資料夾進行git初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure></li><li><p>將git 與 heroku 進行連接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku git:remote -a &#123;HEROKU_APP_NAME&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>此{HEROKU_APP_NAME} 為你在Heroku上 New App 時所取的名稱</p></blockquote></li><li><p><font size="4"> <span class="label success">部屬指令</span></font></p><ul><li>git add .</li><li>git commit -m “這個地方隨便你寫，反正只是用來提醒做了啥”</li><li>git push {app name} master<blockquote><p>{app name} 請將這個地方全部改成剛剛建立app 時所輸入的 app name <strong><em>包含{ }</em></strong><br>例如：git push takilinebot master<br>此處之部屬指令，將來會<strong><em>重複使用</em></strong>，對於一台電腦，上述四個步驟基本上只需要做一次即可</p></blockquote></li></ul></li></ol><h3 id="7-測試機器人"><a href="#7-測試機器人" class="headerlink" title="7. 測試機器人"></a>7. 測試機器人</h3><ol><li>回到<a href="https://developers.line.me/console/" target="_blank" rel="noopener">Line 控制台</a>，拉到最下面，使用手機QR Code進行掃描即可<br><img src="https://i.imgur.com/b5w6DFX.png"></li><li>跟他講話<br><img src="https://i.imgur.com/XJTxNgY.png"></li><li>以上就是架設一個基本的學人精機器人</li></ol><hr><p>爬蟲與語意分析部分晚一點再寫</p>]]></content>
      
      <categories>
          
          <category> LineBot機器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LineBot </tag>
            
            <tag> Python </tag>
            
            <tag> jieba </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>資料結構</title>
      <link href="/Taki/2017/11/15/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/"/>
      <url>/Taki/2017/11/15/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/</url>
      <content type="html"><![CDATA[<h2 id="ADTs-Abstract-Data-Types"><a href="#ADTs-Abstract-Data-Types" class="headerlink" title="ADTs(Abstract Data Types)"></a>ADTs(Abstract Data Types)</h2><ul><li>資料與方法的封裝</li><li>可重複使用</li><li>使用者只可使用public方法</li><li>常被稱為資料結構</li></ul><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><ul><li>描述一個ADTs所 <strong>必須</strong> 被實作的<em>動作</em> 或 <em>方法</em>(包含傳回值與傳入值)。</li><li>可用來 <strong>多重繼承</strong></li><li>所有的 <em>方法</em> 都是<strong>abstract methods</strong></li><li>所有的 <em>資料</em> 前輟皆為 <strong>static final</strong></li></ul><h3 id="實作-implement"><a href="#實作-implement" class="headerlink" title="實作(implement)"></a>實作(implement)</h3><ul><li>實作Interface時，將<code>implement InterfaceName</code>置於class後</li><li>除了實作所有Interface 中方法與資料外，可自行加上其他資料與方法甚至建構子(constructors)<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>必須將所有於 <strong>Interface</strong>中的方法全部實作，否則會出現syntax error</li><li>無法宣告Interface，否則將導致syntax error<br><code>ATM anATM = new ATM();    // invalid statement</code></li></ul></li></ul><a id="more"></a><h2 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h2><ul><li>前言：人是哺乳類，所以人有哺乳類動物的特徵。以此觀點來看繼承即是，子代擁有父代所有的特徵、行為等，但這些特徵或行為可能保留，抑或是進化成使其更能生存於此環境。</li><li>於 <em>要繼承的class</em> 後加上<code>extends superClassName</code></li></ul><h3 id="this"><a href="#this" class="headerlink" title="this."></a>this.</h3><ul><li><strong>this.</strong>  用於區隔 <strong>區域變數</strong> 與 <strong>class內成員變數</strong></li></ul><h3 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h3><ul><li>使用父代建構子(constructor)將繼承自父代的資料先行初始化</li><li>必須位於子代建構子 <strong>第一行</strong></li><li>若PM並沒有寫super於建構子第一行，Java 將自動於建構子第一行補上</li></ul><h3 id="建構子-constructor"><a href="#建構子-constructor" class="headerlink" title="建構子 (constructor)"></a>建構子 (constructor)</h3><ul><li>如果PM沒有撰寫 <strong>無傳入值的建構子(constructor)</strong> ，Java會使用預設(default)建構子</li><li>如果PM有自行寫過無傳入值的建構子，Java便不使用預設建構子</li><li>如果子代含有無傳入值建構子而父代</li></ul><blockquote><p>以下以電腦與筆電為例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D2017_10_11</span> </span>&#123;</span><br><span class="line"><span class="comment">/** Class that represents a computers */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"><span class="comment">// Data fields</span></span><br><span class="line"><span class="keyword">private</span> String manufacturer;</span><br><span class="line"><span class="keyword">private</span> String processor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> ramSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> diskSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> processorSpeed;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String man, String processor, <span class="keyword">double</span> ram, <span class="keyword">int</span> disk, <span class="keyword">double</span> procSpeed)</span> </span>&#123;</span><br><span class="line">manufacturer = man;</span><br><span class="line"><span class="keyword">this</span>.processor = processor;<span class="comment">//用於區隔區域變數或成員變數</span></span><br><span class="line">ramSize = ram;</span><br><span class="line">diskSize = disk;</span><br><span class="line">processorSpeed = procSpeed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePower</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ramSize * processorSpeed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRamSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ramSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getProcessorSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> processorSpeed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDiskSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> diskSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String result = <span class="string">"Manufacturer: "</span> + manufacturer + <span class="string">"\nCPU: "</span> + processor + <span class="string">"\nRAM: "</span> + ramSize + <span class="string">" megabytes"</span></span><br><span class="line">+ <span class="string">"\nDisk: "</span> + diskSize + <span class="string">" gigabytes"</span> + <span class="string">"\nProcessor speed: "</span> + processorSpeed + <span class="string">" gigahertz"</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Class that represents a notebook computer **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notebook</span> <span class="keyword">extends</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"><span class="comment">// Date fields</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> screenSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> weight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Notebook</span><span class="params">(String man, String processor, <span class="keyword">double</span> ram, <span class="keyword">int</span> disk, <span class="keyword">double</span> procSpeed, <span class="keyword">double</span> screen,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">double</span> wei)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(man, processor, ram, disk, procSpeed);</span><br><span class="line">screenSize = screen;</span><br><span class="line">weight = wei;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String result = <span class="keyword">super</span>.toString() + <span class="string">"\nScreen size: "</span> + screenSize + <span class="string">" inches"</span> + <span class="string">"\nWeight: "</span> + weight</span><br><span class="line">+ <span class="string">" pounds"</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Java 物件問題</title>
      <link href="/Taki/2017/11/14/Java-%E7%89%A9%E4%BB%B6%E5%95%8F%E9%A1%8C/"/>
      <url>/Taki/2017/11/14/Java-%E7%89%A9%E4%BB%B6%E5%95%8F%E9%A1%8C/</url>
      <content type="html"><![CDATA[<h4 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h4><ul><li>子代繼承父代，改寫方法，新增功能。<blockquote><p>子代的method必定多餘或等於父代。</p></blockquote></li></ul><h4 id="Java-物件宣告子代實作父代"><a href="#Java-物件宣告子代實作父代" class="headerlink" title="Java 物件宣告子代實作父代"></a>Java 物件宣告子代實作父代</h4><ul><li>compilor Error<blockquote><p>因子代功能多於父代</p></blockquote></li></ul><h4 id="物件宣告父代實作子代"><a href="#物件宣告父代實作子代" class="headerlink" title="物件宣告父代實作子代"></a>物件宣告父代實作子代</h4><ul><li><p>只可以使用父代所擁有的方法，無法使用子代方法。</p><blockquote><p>因父代並無宣告此方法。</p></blockquote></li><li><p>使結構有更好的彈性</p><blockquote><p>當加入新的class 繼承自A，使用方法時，只需要再加判別即可，可降低對原有程式的衝擊。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">A obj = <span class="keyword">new</span> A();</span><br><span class="line">method1(obj);</span><br><span class="line">method1(<span class="keyword">new</span> B());</span><br><span class="line">method1(<span class="keyword">new</span> C());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(A obj)</span> </span>&#123;<span class="comment">//A obj 的設計，讓此方法很有彈性。</span></span><br><span class="line">obj.m1();</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> B) &#123;<span class="comment">//識別B是否為obj的subclass</span></span><br><span class="line">B obj1 = (B) obj;</span><br><span class="line">obj1.m2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> C) &#123;<span class="comment">//識別C是否為obj的subclass</span></span><br><span class="line">C obj1 = (C) obj;</span><br><span class="line">obj1.m3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"m1 of A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"m1 of B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"m3 of B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"m1 of C"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"m4 of C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多形的產生"><a href="#多形的產生" class="headerlink" title="多形的產生"></a>多形的產生</h4><ul><li>建立在方法的改寫。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OSU</title>
      <link href="/Taki/2017/11/03/OSU/"/>
      <url>/Taki/2017/11/03/OSU/</url>
      <content type="html"><![CDATA[<p>好久沒完QAQ 排名173814<br><img src="https://i.imgur.com/E8jtl4T.jpg"></p><h2 id="譜面"><a href="#譜面" class="headerlink" title="譜面"></a>譜面</h2><p>不定時更新譜面<br><a href="https://drive.google.com/drive/folders/0B4Uh6_dwqtZ5TzlLdXI5dDZ1eEU?usp=sharing" target="_blank" rel="noopener">https://drive.google.com/drive/folders/0B4Uh6_dwqtZ5TzlLdXI5dDZ1eEU?usp=sharing</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Java D2017_10_24</title>
      <link href="/Taki/2017/10/24/Java-D2017-10-24/"/>
      <url>/Taki/2017/10/24/Java-D2017-10-24/</url>
      <content type="html"><![CDATA[<h2 id="System-gc"><a href="#System-gc" class="headerlink" title="System.gc()"></a>System.gc()</h2><p><em><strong>建議</strong></em> 系統回收不使用的記憶體  </p><blockquote><p>物件終結者</p></blockquote><ol><li>非命令。</li><li>非立即回收。</li></ol><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>需看系統當前忙碌程度來決定是否處理垃圾。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>AndroRat 安裝+設定</title>
      <link href="/Taki/2017/10/17/AndroRat/"/>
      <url>/Taki/2017/10/17/AndroRat/</url>
      <content type="html"><![CDATA[<h2 id="Github下載："><a href="#Github下載：" class="headerlink" title="Github下載："></a>Github下載：</h2><blockquote><p>網址： <a href="https://github.com/DesignativeDave/androrat" target="_blank" rel="noopener">https://github.com/DesignativeDave/androrat</a> (下圖)</p></blockquote><p><img src="https://i.imgur.com/pTCU7Ca.png"><br><a id="more"></a></p><blockquote><p>先用<code>cd</code>進入想要存放的磁碟<br>再使用git clone <a href="https://github.com/DesignativeDave/androrat.git" target="_blank" rel="noopener">https://github.com/DesignativeDave/androrat.git</a> (下圖)</p></blockquote><p><img src="https://i.imgur.com/CWifTa7.png"></p><h2 id="Android-Studio下載"><a href="#Android-Studio下載" class="headerlink" title="Android Studio下載"></a>Android Studio下載</h2><blockquote><p>網址：<a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/index.html</a> (下圖)</p></blockquote><p><img src="https://i.imgur.com/RgSLQ7O.png"></p><blockquote><p>安裝完成圖(下圖)</p></blockquote><p><img src="https://i.imgur.com/PEdM1XJ.png"></p><blockquote><p>選擇第三個import project(Eclipse ADT,Gradle,etc.)(下圖)</p></blockquote><p><img src="https://i.imgur.com/6F2YESt.png"></p><blockquote><p>按下<code>...</code>選擇剛剛從github clone下來的資料夾中<code>androat\src\Androrat</code>這個資料夾(下圖)</p></blockquote><p><img src="https://i.imgur.com/tJ3Q3It.png"></p><blockquote><p>下一步會需要將之前<code>eclipse workspace</code>的位置給Android Studio(下圖)</p></blockquote><p><img src="https://i.imgur.com/ru8CCgt.png"><br><img src="https://i.imgur.com/XgDhool.png"><br><img src="https://i.imgur.com/NINMpO8.png"></p><blockquote><p>更改IP與Port(下圖)</p></blockquote><p><img src="https://i.imgur.com/doCfIdB.jpg"></p><blockquote><p>輸出APK檔案(下圖)</p></blockquote><p><img src="https://i.imgur.com/FfPIx0Y.png"><br><img src="https://i.imgur.com/GkxWx8q.png"></p><blockquote><p>將APK裝到手機上<br><img src="https://i.imgur.com/uAsizF8.jpg"></p></blockquote><h2 id="AndroRatServer使用"><a href="#AndroRatServer使用" class="headerlink" title="AndroRatServer使用"></a>AndroRatServer使用</h2><blockquote><p>開啟eclipse，並開啟檔案</p></blockquote><p><img src="https://i.imgur.com/XbrJWi5.png"><br><img src="https://i.imgur.com/Uh6TFI4.png"><br><img src="https://i.imgur.com/5qgGyM5.png"><br><img src="https://i.imgur.com/gCo7gaP.png"></p><blockquote><p>接著對剛開起的專案按下右鍵，選擇properties</p></blockquote><p><img src="https://i.imgur.com/4NmkU8j.png"></p><blockquote><p>剛開始應該都是紅色叉叉，按下<code>Add External JARs</code>，將<code>androRat\src\api</code>中所有jar檔選取。</p></blockquote><p><img src="https://i.imgur.com/YoIuOFi.png"><br><img src="https://i.imgur.com/pBbKoPH.png"></p><blockquote><p>最後對專案按右鍵，選擇<code>Run As</code>-&gt; <code>Java Application</code>，下圖是因為我的手機還開著，所以自動跑了出來最終的結果，正常狀況是不會有任何東西的。</p></blockquote><p><img src="https://i.imgur.com/FVH2xQQ.jpg"></p><h2 id="Port-Forwording-NAT"><a href="#Port-Forwording-NAT" class="headerlink" title="Port Forwording(NAT)"></a>Port Forwording(NAT)</h2><blockquote><p>沒有錯，就是開啟你的機上盒的管理員</p></blockquote><p><img src="https://i.imgur.com/ovRhsKR.png"><br><img src="https://i.imgur.com/vTDSeU6.png"></p><blockquote><p>進入後，開啟NAT，將NAT打開，並使用CMD查詢IP(ipconfig)。</p></blockquote><p><img src="https://i.imgur.com/Juvgygt.png"></p><blockquote><p>打開1337port並指向我電腦所在IP</p></blockquote><p><img src="https://i.imgur.com/TnUG31O.png"></p><h2 id="no-ip-DNS"><a href="#no-ip-DNS" class="headerlink" title="no-ip(DNS)"></a>no-ip(DNS)</h2><p><img src="https://i.imgur.com/sncQMlV.png"></p><blockquote><p>登入後，進入<code>Managed DNS</code>，選擇<code>Add A Host</code>，隨便取個名字，後按下<code>Add Host</code></p></blockquote><p><img src="https://i.imgur.com/9wD17Cx.png"><br><img src="https://i.imgur.com/zQXS7oU.jpg"><br><img src="https://i.imgur.com/NJ1d8ED.jpg"></p><blockquote><p>接著下載noip的Client端</p></blockquote><p><img src="https://i.imgur.com/oqH8DDp.png"></p><blockquote><p>安裝完後，登入後畫面</p></blockquote><p><img src="https://i.imgur.com/ClDPdT3.jpg"></p><p>經過了以上設定後，手機輸入noip所給予的ip，port輸入我們所設定的1337後，按下start server即可。<br>過一段時間後，就變成下圖<br><img src="https://i.imgur.com/FVH2xQQ.jpg"></p><h2 id="使用截圖"><a href="#使用截圖" class="headerlink" title="使用截圖"></a>使用截圖</h2><p><img src="https://i.imgur.com/ZYzhnHq.png"></p><blockquote><p>下圖是真的拿出所有的聯絡人資料，還可以遠端操控撥打電話。</p></blockquote><p><img src="https://i.imgur.com/dqtKXTZ.jpg?1"></p>]]></content>
      
      <categories>
          
          <category> 資訊安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> noip </tag>
            
            <tag> Android </tag>
            
            <tag> Secure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何使用Hexo + Github page架設專屬免費部落格(教學)</title>
      <link href="/Taki/2017/10/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo-Github-page%E6%9E%B6%E8%A8%AD%E5%B0%88%E5%B1%AC%E5%85%8D%E8%B2%BB%E9%83%A8%E8%90%BD%E6%A0%BC-%E6%95%99%E5%AD%B8/"/>
      <url>/Taki/2017/10/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo-Github-page%E6%9E%B6%E8%A8%AD%E5%B0%88%E5%B1%AC%E5%85%8D%E8%B2%BB%E9%83%A8%E8%90%BD%E6%A0%BC-%E6%95%99%E5%AD%B8/</url>
      <content type="html"><![CDATA[<h1 id="教學"><a href="#教學" class="headerlink" title="教學"></a>教學</h1><h2 id="．資料參考來源"><a href="#．資料參考來源" class="headerlink" title="．資料參考來源"></a>．資料參考來源</h2><ul><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo 官方文件</a> <em>&lt;- 他是中文的，他是中文的，他是中文的</em></li><li><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li><li><a href="http://markdown.tw/" target="_blank" rel="noopener">Markdown文件</a> <em>&lt;- 它也是中文的!!!</em></li><li><a href="https://sean.life/2016/09/16/Create-a-personl-blog-website/" target="_blank" rel="noopener">建立個人部落格</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">建立分類頁面</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">建立標籤</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA-%22%E5%85%B3%E4%BA%8E%E6%88%91%22-%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">建立關於頁面</a></li><li><a href="http://gundambox.github.io/2015/10/06/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A/" target="_blank" rel="noopener">hexo留言與主題設定</a><em>(大頭貼設定以及留言板設定)</em><blockquote><p>以上 參考時間 2017/8/17</p><a id="more"></a></blockquote></li></ul><h2 id="．建立環境"><a href="#．建立環境" class="headerlink" title="．建立環境"></a>．建立環境</h2><blockquote><p>我的系統是 windows10，mac的不會QAQ，google上非常多資訊，只是可能要再自己消化。</p></blockquote><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安裝方法</a></li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul><li><a href="https://git-scm.com/download/" target="_blank" rel="noopener">下載</a></li></ul><h3 id="文字編輯器，個人使用sublime3"><a href="#文字編輯器，個人使用sublime3" class="headerlink" title="文字編輯器，個人使用sublime3"></a>文字編輯器，個人使用sublime3</h3><ul><li><a href="https://drive.google.com/file/d/0B4Uh6_dwqtZ5NVB1WXRqVHMtWVk/view" target="_blank" rel="noopener">下載</a> + <a href="https://drive.google.com/file/d/0B4Uh6_dwqtZ5azNaZnVlZEZlTk0/view" target="_blank" rel="noopener">序號</a> 這是免安裝版本，序號的填入就請自行Google一下拉~ 相信不會很難的!</li></ul><blockquote><p>記得，在下面的code中，發現太長不好找時，ctr+F5 是你的好夥伴^.^</p></blockquote><h3 id="終端機"><a href="#終端機" class="headerlink" title="終端機"></a>終端機</h3><p>Ctr+r <- 開啟搜尋，鍵入cmd，歡迎看見你的終端機。="" 至於資料夾存放位置的部分，自行決定(個人放在d槽)。如果有c、d槽，系統一開始會再`c:\user\xxx=""><code>，要進D槽，請鍵入</code>D:<code>。進哪個資料夾就鍵入</code>cd 位置`，這樣講還不行，Google吧。</-></p><h3 id="GitHub帳號"><a href="#GitHub帳號" class="headerlink" title="GitHub帳號"></a>GitHub帳號</h3><ol><li>申請完帳號後，到右上方+字符號，點選new repository。<br><img src="http://i.imgur.com/U2fE8G2l.jpg"></li><li>進入後，輸入repository name，隨你喜好，只要右邊有綠色勾勾就可以。<br><img src="http://i.imgur.com/7bu5nJnl.jpg"></li><li>按下create repository後出來的畫面。<br><img src="http://i.imgur.com/15yam2ll.jpg"><br>好了 ，就這麼簡單，你的repository就建好了，剩下，對於不熟悉code的人來說有些可怕，不用怕，關掉它吧!<br>接下來的設定文件，先把git要設定的關鍵詞先放在這裡，等等要用時直接回頭複製貼上。</li></ol><h3 id="關鍵詞整理Github"><a href="#關鍵詞整理Github" class="headerlink" title="關鍵詞整理Github"></a>關鍵詞整理Github</h3><pre><code>url: https://username.github.io/repositorynameroot: /repositoryname/type: gitrepo: https://github.com/username/repositoryname.gitbranch: master</code></pre><p><strong>其中 <code>username</code>就是你申請github時的username，<code>repositoryname</code>就是上面第二步你所填的名稱</strong></p><h2 id="．安裝Hexo-Hexo-hey-視覺化後台"><a href="#．安裝Hexo-Hexo-hey-視覺化後台" class="headerlink" title="．安裝Hexo + Hexo-hey(視覺化後台)"></a>．安裝Hexo + Hexo-hey(視覺化後台)</h2><pre><code>$ npm install -g hexo-cli(安裝hexo)$ cd 進想要存放blog的位置$ hexo init yourname (產生一個yourname的 hexo網站)</code></pre><blockquote><p>此處yourname請自行命名。</p></blockquote><p><code>$ cd yourname</code><br><code>$ npm install</code>(將網站安裝上去)<br><code>$ npm install hexo-hey --save</code>(安裝hexo-hey 視覺化的後台，為了之後po文時編輯的方便)<br><code>$ npm install hexo-deployer-git --save</code>(這是為了之後將hexo deploy上github pages上所需安裝的套件)</p><p>好了，需要安裝的差不多了。</p><blockquote><p>個人是習慣先把必須安裝的安裝完再一次性進行設定，雖然出錯風險高，但按照步驟不會錯的。</p></blockquote><p>接下來，開啟文字編輯器(sublime3)，使用方法這邊就不教。</p><blockquote><p>open folder，找到資料夾，按下確認。(歐 我還是教了Orz)</p></blockquote><h2 id="．設定"><a href="#．設定" class="headerlink" title="．設定"></a>．設定</h2><hr><p><strong>最重要、最重要、最重要(大坑)</strong>： (我特別拉一區給它，雖然位置應該要下去，但，實在太重要，先放在上面)</p><ol><li>你所有的設定，例如 title: taki blog 冒號後面，必須必須要加上一個<strong>空白</strong>，<br>仔細看sublime3，編輯文字時，你便會發現區別。</li><li><p>在這裏面的設定，所有都只能夠有一個空白，任何少或者多都會造成無作用，因此，這點必須注意!<br>如同你所看到的，deploy下面的子選項type，跟母選項，只含有<em><strong>1個tab的距離</strong></em>，任何多或少，都會Boom，搞到死都不知道錯在哪…。</p><pre><code>deploy:    type:    </code></pre></li></ol><hr><h3 id="第一步-設定基本資料"><a href="#第一步-設定基本資料" class="headerlink" title="第一步 設定基本資料"></a>第一步 設定基本資料</h3><p>點開<code>yourname/_config.yml</code>(這個，便是整個網站設定的核心部分，至於詳細各個設定請參閱Hexo文件)<br>在最上面會看到這個</p><blockquote><p>以下是我已經改過的，屬於部落格的個人資料，可以自行改動。</p></blockquote><pre><code>title: Taki Blogsubtitle: Taki Blogdescription:author: Takilanguage: zh-twtimezone:</code></pre><h3 id="第二步-設定部屬-deploy"><a href="#第二步-設定部屬-deploy" class="headerlink" title="第二步 設定部屬(deploy)"></a>第二步 設定部屬(deploy)</h3><p>在往下一點點看<br>便會看到這個</p><p>下面的也是經過改動的。</p><pre><code>url: https://username.github.io/repositoryname/root: /repositoryname/permalink: :year/:month/:day/:title/permalink_defaults:    </code></pre><p>接下來，<strong>拉到最下面</strong>找到這個</p><pre><code>deploy:    type:</code></pre><p>改成</p><pre><code>deploy:  type: git  repo: https://github.com/username/repositoryname.git  branch: master</code></pre><blockquote><p>有沒有發現什麼? 沒錯，就是複製貼上剛剛在上面做的事情，其實是我跌坑跌最慘的，所以才會先做一下筆記Orz<br>需要更改、新增的地方便是url, root, type, repo, branch(這個可有可無，系統也會自己抓，但我還是用master，因為我不想讓它使用其他分支，這個大概只會用來做我的網站用。)</p></blockquote><h3 id="第三步-設定後台"><a href="#第三步-設定後台" class="headerlink" title="第三步 設定後台"></a>第三步 設定後台</h3><p>下面一行再新增這個，這個是做為後台所需要的</p><pre><code># Adminadmin:    name: hexo    password: hey    secret: hey hexo    expire: 60*1    # cors: http://localhost:3000</code></pre><p>太棒了，基本上的設定，就差不多這樣!</p><h2 id="．寫下自己第一個的文章吧"><a href="#．寫下自己第一個的文章吧" class="headerlink" title="．寫下自己第一個的文章吧!"></a>．寫下自己第一個的文章吧!</h2><p><em>注意：以下所有指令，都必須再yourname這個資料夾底下進行</em></p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>後面()部分為簡寫。以下排列是有意義的，前三步，基本上是對文件做任何改動後必須做的流程，hexo d 就做為當你認為你的網站已經可以上去了就把它deploy上去吧。</p><p><code>$ hexo clean</code> 清除public。對於每次的改動，都必須要先做一次這一個<br><code>$ hexo generate</code> (<code>hexo g</code>) 生成靜態文件，會於當前目錄下產生一個public的資料夾，這個資料夾將來會是deploy上Github 的一個文件夾，裡面包含你整個網站。<br><code>$ hexo server</code> (<code>hexo s</code>) 開啟本地web服務，讓你可以先不用deploy到Github上，就可以先行預覽你的網站。<br><code>$ hexo deploy</code> (<code>hexo d</code>) 部屬(deploy)到Github上</p><h3 id="常用組合鍵"><a href="#常用組合鍵" class="headerlink" title="常用組合鍵"></a>常用組合鍵</h3><p><code>$ hexo s -g</code> 生成後預覽</p><p>那麼 遊戲開始(?)</p><h3 id="第一步-產生我的網站"><a href="#第一步-產生我的網站" class="headerlink" title="第一步 產生我的網站"></a>第一步 產生我的網站</h3><p><code>$ hexo g</code> 產生靜態文件<br><code>$ hexo s</code> 預覽網站</p><p>接下來，打開你的瀏覽器輸入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，由於上面的設定(url &amp; root)，<br>所以你的網址會自動變成這樣<code>http://localhost:4000/repositoryname/</code>這是正常的。</p><p>恩 就這樣你的網站就這樣好了(！？)</p><hr><h4 id="文章-post-與-網頁-page-差別"><a href="#文章-post-與-網頁-page-差別" class="headerlink" title="文章(post) 與 網頁(page)差別?"></a>文章(post) 與 網頁(page)差別?</h4><blockquote><p>好吧，這是我從網路上看到後記下來的東西，如果有錯，批小力點QQ</p></blockquote><p>post 屬於日常、動態的，它有分類、標籤這些功能。(系統預先設定的便是這個)<br>page 屬於不會經常性更動的類型，因此，像是about, tags, categorys這類分頁，都屬於page的範疇</p><p>對了，其實指令也有這兩個 (<em>中括號都要去掉 </em>)<br><code>$ hexo new [title]</code> 建立一個post 的 title文件<br><code>$ hexo new page [title]</code> 建立一個page 的 title文件</p><p>至於為什麼不使用，原因很簡單，我們有後台拉(hexo-hey)~要這些做啥?有後台+markdown，寫一篇自己的部落格不難!</p><hr><h3 id="第二步-編輯我的文章"><a href="#第二步-編輯我的文章" class="headerlink" title="第二步 編輯我的文章"></a>第二步 編輯我的文章</h3><p>請於瀏覽器上方輸入<a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a> (&lt;- 或用力戳它XD)</p><pre><code>帳號：hexo密碼：hey</code></pre><p>恭喜你，看到了你的後台。(請自行摸索一下，它的功能實在是簡單到不想做這個筆記…)</p><p>沒有錯，其實我也只是第一次碰這個東西所以它除了learning markdown這個文章之外，根本就沒有其它東西<br><img src="http://i.imgur.com/U2T7lc3l.jpg"></p><p>寫到目前的文章<br><img src="http://i.imgur.com/2KBmlOXl.jpg"></p><p>上面有一個新建這個按鈕，接下來，就靠你的雙手，自學一下markdown這個簡單的語言吧(普通大概也就花個30-40分鐘就會了)~</p><h3 id="第三步-deploy到你的Github-pages上"><a href="#第三步-deploy到你的Github-pages上" class="headerlink" title="第三步 deploy到你的Github pages上"></a>第三步 deploy到你的Github pages上</h3><p>終於到了這一步!</p><p>(這邊我都假設你是正常狀況下，如果不是正常狀況，你可能要在自己debug一下看看是不是哪裡做錯了，我這邊基本上都測過是可以的)</p><p><code>$ hexo d</code>輸入吧，就是這樣。<br><img src="http://i.imgur.com/UW6OuX8l.jpg"></p><p>你覺得這些很醜? 沒關係，有一個名人說過這類的話</p><blockquote><p>如果你在發布你第一件產品的幾年後，回過頭來看，如果你不覺得很丟臉，那麼你起步得太慢了!<br>正確的方式應該是，做好準備後(不需要萬全)，就起步，然後再快速調整，穩定輸出。 – 給有完美主義的你</p></blockquote><p>看吧(好吧，你應該是不會有大頭照、標籤、分類、關於以及theme也不是長這樣，但這些之後再說。)<br><img src="http://i.imgur.com/g1S5SpZl.jpg"></p><p>恭喜啦! 基本上，po文必需的事情地做完了!</p><h2 id="．Theme更換以及分類、標籤、關於頁面"><a href="#．Theme更換以及分類、標籤、關於頁面" class="headerlink" title="．Theme更換以及分類、標籤、關於頁面"></a>．Theme更換以及分類、標籤、關於頁面</h2><h3 id="第一步-clone-主題資料"><a href="#第一步-clone-主題資料" class="headerlink" title="第一步 clone 主題資料"></a>第一步 clone 主題資料</h3><blockquote><p>這個也是在yourname資下夾下輸入<br><strong>注意：在日後需要clone theme時 ，注意後面要加上一個 themes/主題名稱 ，這個是跟git說，我要clone到這個資料夾，如果資料夾不存在，它會自己生成。</strong></p></blockquote><p><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code> (如果你很懶的話，那就跟著潮流走吧)</p><h3 id="第二步-開啟主題"><a href="#第二步-開啟主題" class="headerlink" title="第二步 開啟主題"></a>第二步 開啟主題</h3><p>使用文字編輯器(sublime3)進<code>yourname/_config.yml</code>更改成</p><p><code>theme: next</code></p><h3 id="第三步-分類、標籤、關於頁面、大頭照片的啟用"><a href="#第三步-分類、標籤、關於頁面、大頭照片的啟用" class="headerlink" title="第三步 分類、標籤、關於頁面、大頭照片的啟用"></a>第三步 分類、標籤、關於頁面、大頭照片的啟用</h3><p>關於裡面所有的<code>_config.yml</code>都是指<code>themes/next</code>下的哦! 千萬別搞錯了</p><ul><li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">建立分類頁面</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">建立標籤</a></li><li><p><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA-%22%E5%85%B3%E4%BA%8E%E6%88%91%22-%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">建立關於頁面</a><br>關於頁面，此頁面的編輯，請開啟文字編輯器(sublime3)，到<code>source/about/index.md</code>直接編輯，這個無法使用後台進行編輯。</p><blockquote><p>仔細看，它是.md檔，因此，它是markdown文件，你是怎麼使用Hey hexo後台的，就怎麼樣使用它，只是無法像hey hexo一樣及時看到呈現。</p></blockquote></li><li><p>大頭照片：先將你要的相片(我的相片名稱avatar.jpg)放到<code>yourname/source/images</code>底下，進<code>yourname/themes/_config.yml</code>下改成，他一開始是用<code>#</code>被註解掉的，請使用backspace變成底下</p><pre><code>avatar: /images/avatar.jpg</code></pre></li></ul><h3 id="第四步-重要三指令"><a href="#第四步-重要三指令" class="headerlink" title="第四步 重要三指令"></a>第四步 重要三指令</h3><pre><code>$ hexo clean$ hexo g$ hexo s</code></pre><p>接下來，就細細的觀賞你的部落格吧，別忘了，欣賞完(沒問題後)要記得<code>$ hexo d</code>讓他上去讓大家也欣賞你個人的部落格囉。</p><h2 id="．留言板設置"><a href="#．留言板設置" class="headerlink" title="．留言板設置"></a>．留言板設置</h2><h3 id="註冊與設定"><a href="#註冊與設定" class="headerlink" title="註冊與設定"></a>註冊與設定</h3><ol><li><p>選擇get start<br><img src="http://i.imgur.com/PHPbuwsl.jpg"></p></li><li><p>選擇I Want to install Disqus on my site<br><img src="http://i.imgur.com/n9dxBfsl.jpg"></p></li><li><p>填上自己想要的website name<br><img src="http://i.imgur.com/LW2gxWql.jpg"></p></li><li><p>請滑到最上面關鍵詞整理Github，把你的url輸入。<br><img src="http://i.imgur.com/9o7phAtl.jpg"></p></li><li><p>選擇你的website<br><img src="http://i.imgur.com/7bu5nJnl.jpg"></p></li></ol><p>6.找到你的shortname，並且複製起來(其實就是你剛剛註冊時填上的websitename)<br><img src="http://i.imgur.com/xjBAarql.jpg"></p><p>接下來，開啟文字編輯器(sublime3)，開啟themes/你所設定的主題<code>_config.yml</code>，尋找<code>disqus</code>，並改成下列</p><pre><code>#Disqus    disqus:  enable: true  shortname: 你的shortname  count: true</code></pre><p>儲存後，於終端機鍵入三指令<code>$ hexo clean</code> <code>$ hexo g</code> <code>$ hexo s</code><br>觀賞吧，你的網站。<br>至於 關於、標籤、分類頁面上都會有留言板，可以滑到上面教學，裡面有處理辦法，請再次回去看吧。</p>]]></content>
      
      <categories>
          
          <category> 部落格 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
